CONCEPTS TO PRACTICE

1. Class
2. Attributes
3. Methods
4. Class Level Attributes
5. Class Level Methods
6. Enums
7. Associations: Has-a (another class object as an attribute)
8. Dependancies: Uses-a (another class object for a method but does not have it as an attribute)
9. 1 Multiplicity
10. 0 or 1 Multiplicity
11. 1+ Multiplicity
12. Inheritance
13. Overriding
14. Overloading
15. Interface
16. Abstact Class
17. Lambda expressions
18. Stream API
19. Optional class for null handling
20. Date and time API (java.time package)
21. Default and static methods in interfaces

NOTES

1. Overriding the equals method requires the method signature to be equals(Object).
2. An abstract class can implement an interface and choose to define some/all or none of the interface's methods.
3. Abstract classes cannot be instantiated but normal class can.
4. You can define relationships between two objects using a class.
5. Relationships can be uni or bi directional. E.g. Person can have a pet dog but the dog can have a different person as its owner.
6. Abstract classes to be used over interfaces when you want attributes to be shared too instead of just methods to be shared.
7. Interfaces can be used when you want a class to implement multiple interfaces because you cannot extend more than one class in Java to avoid the diamond problem.


ARRAYS

import java.util.Arrays;
int[] numbers = new int[5];
numbers[0] = 1
numbers[1] = 2

int[] numbers = {1, 2, 3, 4, 5}

number.length
Arrays.toString(numbers);
For multidimensional arrays use Arrays.deepToString(numbers);

CONSTANTS

Defined with final keyword. Cannot be changed later.

LOOPS 

for (int i = 0; i < 5; i++) {
    return true;
}

CONDITIONALS

n = 0
if (n > 0) {
    return "Positive";
} else if (n < 0) {
    return "Negative";
} else {
    return "Is 0";
}

Advantages of a Wrapper Class:

1. Additional Methods
2. Enabling Generics
3. Immutable
4. Can be null
5. Java Collections only work on Wrapper Classes. Cannot do ArrayList<int>, it should be ArrayList<Integer>

Comparable<T> Interface:

This is a standard Java interface in the java.lang package.
It is used to define a natural ordering for objects of a class.
Classes implementing Comparable<T> must define the compareTo(T o) method, which is used for comparison.

Generic Bounds:

In a generic class or method, you can restrict the type parameter to specific types using the extends keyword.
T extends Comparable<T> means:
1. T must implement the Comparable<T> interface.
2. Therefore, objects of type T can be compared using the compareTo() method.

Stack:

Examples: 
1. Local variables (int num = 10;)
2. Method calls
3. References to an object (Person p1 = new Person("Rik");)

Heap:

1. Stores objects (new Person("Rik");)
2. lass-level variables (String name;)

Garbage Collection:

Person p1 = new Person("Rik");
p1 = null;

Here, new Person("Rik") is cleaned up from the Heap through Garbage Collection.