CONCEPTS TO PRACTICE

1. Class
2. Attributes
3. Methods
4. Class Level Attributes
5. Class Level Methods
6. Enums
7. Associations
8. Dependancies
9. 1 Multiplicity
10. 0 or 1 Multiplicity
11. 1+ Multiplicity
12. Inheritance
13. Overriding
14. Overloading
15. Interface
16. Abstact Class

NOTES

1. Overriding the equals method requires the method signature to be equals(Object).
2. An abstract class can implement an interface and choose to define some/all or none of the interface's methods.
3. Abstract classes cannot be instantiated but normal class can.
4. You can define relationships between two objects using a class.
5. Relationships can be uni or bi directional. E.g. Person can have a pet dog but the dog can have a different person as its owner.
6. Abstract classes to be used over interfaces when you want attributes to be shared too instead of just methods to be shared.
7. Interfaces can be used when you want a class to implement multiple interfaces because you cannot extend more than one class in Java to avoid the diamond problem.


ARRAYS

import java.util.Arrays;
int[] numbers = new int[5];
numbers[0] = 1
numbers[1] = 2

int[] numbers = {1, 2, 3, 4, 5}

number.length
Arrays.toString(numbers);
For multidimensional arrays use Arrays.deepToString(numbers);

CONSTANTS

Defined with final keyword. Cannot be changed later.

LOOPS 

for (int i = 0; i < 5; i++) {
    return true;
}

CONDITIONALS

n = 0
if (n > 0) {
    return "Positive";
} else if (n < 0) {
    return "Negative";
} else {
    return "Is 0";
}